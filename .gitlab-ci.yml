# vim: set expandtab shiftwidth=2 :

image: $CI_REGISTRY/lrr-tum/students/eragp-sbt-2021/gp_build_env:latest

cache:
  paths:
    - "build"
  # https://docs.gitlab.com/ee/ci/caching/#good-caching-practices
  # per-branch per-stage cache
  # this allows the main build to be done with different meson settings than the tests
  key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"

build:
  stage: build
  needs: []
  script:
    - meson setup build
    - meson configure build -Dwerror=true -Db_sanitize=undefined
    - ninja -C build
  artifacts:
    paths:
      - "build/src/generator/x86_64/helper/libhelper-x86_64.a"
      - "build/src/generator/libgenerator.a"
      - "build/src/ir/libir.a"
      - "build/src/lifter/liblifter.a"
      - "build/src/translate"

test:
  stage: test
  needs:
    # Tests are expected to be very expensive so only run when everything else is working
    - build
  script:
    - meson setup build
    # NOTE: address sanitizer appears to requires ptrace permissions which the gitlab runners do not have
    - meson configure build -Db_coverage=true -Dwerror=true -Db_sanitize=undefined
    # Clean old coverage reports or libgcov will complain
    - ninja -C build clean-gcda clean-gcno
    - LSAN_OPTIONS=verbosity=1:log_threads=1 ninja -C build test
    # seperate line to ensure that test has finished, because coverage-xml has no dependency on
    # test but that is required for meaningful results
    # we need to run coverage-html for the summary, see https://github.com/mesonbuild/meson/pull/4576 for the why
    - ninja -C build coverage-xml coverage-html
  # Extract the lines coverage percentage from the build output
  coverage: '/^\s*lines\.*:\s*\d+.\d+\%/'
  artifacts:
    when: always
    paths:
      - "build/meson-logs"
    reports:
      # unit tests
      junit: "build/meson-logs/testlog.junit.xml"
      # coverage
      cobertura: "build/meson-logs/coverage.xml"

clang-format:
  stage: test
  needs: []
  script:
    - meson setup build
    - meson configure build -Dwerror=true
    - ninja -C build clang-format-check

zip-utility:
  stage: test
  cache:
    key: "build-${CI_COMMIT_REF_SLUG}" # use build files previously generated
  needs:
    - build
  script:
    - tests/simple_zip/test.sh riscv64-linux-gnu-gcc
    - tests/simple_zip/test.sh /toolchain/bin/riscv64-linux-gnu-gcc
  tags:
    - mem_intensive
